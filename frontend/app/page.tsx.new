"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  PlusIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CalendarIcon,
  ListIcon,
  ClockIcon,
  ActivityIcon,
  TrendingUpIcon,
  FilterIcon,
  DumbbellIcon,
  BarChart3Icon,
} from "lucide-react"
import { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, isSameMonth, isToday } from "date-fns"
import { ptBR } from "date-fns/locale"
import { ExecucoesTreinoApi, TreinosApi } from "@/lib/api"
import { TreinoExecucao, TreinoFixo } from "@/lib/types"
import { useToast } from "@/hooks/use-toast"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { motion, AnimatePresence } from "framer-motion"
import { Skeleton } from "@/components/ui/skeleton"

export default function CalendarioPage() {
  const [currentDate, setCurrentDate] = useState(new Date())
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date())
  const [view, setView] = useState<"calendar" | "list">("calendar")
  const [filter, setFilter] = useState("todos")
  const [isLoading, setIsLoading] = useState(true)
  const [isLoadingTreinos, setIsLoadingTreinos] = useState(false)
  const [showTreinoSelector, setShowTreinoSelector] = useState(false)
  const { toast } = useToast()
  const router = useRouter()

  const [execucoesTreino, setExecucoesTreino] = useState<TreinoExecucao[]>([])
  const [treinosDisponiveis, setTreinosDisponiveis] = useState<TreinoFixo[]>([])
  const [dataSelecionadaParaTreino, setDataSelecionadaParaTreino] = useState<Date | null>(null)

  useEffect(() => {
    const carregarExecucoes = async () => {
      try {
        setIsLoading(true)
        const execucoes = await ExecucoesTreinoApi.listarTodasExecucoesUsuario(0, 500)
        setExecucoesTreino(execucoes)
      } catch (error) {
        console.error("Erro ao carregar execuções:", error)
        toast({
          title: "Erro",
          description: "Não foi possível carregar o histórico de treinos.",
          variant: "destructive",
        })
      } finally {
        setIsLoading(false)
      }
    }

    carregarExecucoes()
  }, [])

  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1))
  const prevMonth = () => setCurrentDate(subMonths(currentDate, 1))

  const execucoesDoDiaSelecionado = selectedDate
    ? execucoesTreino.filter((execucao) => isSameDay(new Date(execucao.data_inicio), selectedDate))
    : []

  const nomesTreinosUnicos = [...new Set(execucoesTreino.map(execucao => execucao.treino_fixo?.nome || 'Sem nome'))]

  const execucoesFiltradas = filter === "todos" 
    ? execucoesTreino
    : execucoesTreino.filter((execucao) => execucao.treino_fixo?.nome === filter)

  const calcularDuracao = (dataInicio: string, dataFim?: string) => {
    if (!dataFim) return "Em andamento"
    
    const inicio = new Date(dataInicio)
    const fim = new Date(dataFim)
    const diferencaMs = fim.getTime() - inicio.getTime()
    const diferencaMinutos = Math.floor(diferencaMs / (1000 * 60))
    
    if (diferencaMinutos < 60) {
      return `${diferencaMinutos} min`
    } else {
      const horas = Math.floor(diferencaMinutos / 60)
      const minutosRestantes = diferencaMinutos % 60
      return `${horas}h ${minutosRestantes}min`
    }
  }

  const carregarTreinosDisponiveis = async () => {
    try {
      setIsLoadingTreinos(true)
      const treinos = await TreinosApi.listarTreinos()
      setTreinosDisponiveis(treinos)
    } catch (error) {
      console.error("Erro ao carregar treinos:", error)
      toast({
        title: "Erro",
        description: "Não foi possível carregar os treinos disponíveis.",
        variant: "destructive",
      })
    } finally {
      setIsLoadingTreinos(false)
    }
  }

  const abrirSeletorTreinos = (data: Date) => {
    setDataSelecionadaParaTreino(data)
    setShowTreinoSelector(true)
    carregarTreinosDisponiveis()
  }

  const handleSelecionarTreinoParaIniciar = (treino: TreinoFixo) => {
    if (dataSelecionadaParaTreino && treino.id) {
      const dataFormatada = format(dataSelecionadaParaTreino, "yyyy-MM-dd")
      router.push(`/treinos/${treino.id}/iniciar?data=${dataFormatada}`)
      setShowTreinoSelector(false)
    } else {
      toast({
        title: "Erro",
        description: "Data ou treino não selecionado corretamente.",
        variant: "destructive",
      })
    }
  }

  const renderDayContent = (day: Date) => {
    return (
      <div className="text-sm">
        {format(day, "d")}
      </div>
    )
  }

  const renderCalendario = () => {
    const diasDoMes = eachDayOfInterval({
      start: startOfMonth(currentDate),
      end: endOfMonth(currentDate),
    })

    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold">
            {format(currentDate, "MMMM yyyy", { locale: ptBR })}
          </h2>
          <div className="flex gap-1">
            <Button variant="outline" size="icon" onClick={prevMonth}>
              <ChevronLeftIcon className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon" onClick={nextMonth}>
              <ChevronRightIcon className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-7 gap-1 text-center text-sm font-medium text-gray-500">
          <div>Dom</div>
          <div>Seg</div>
          <div>Ter</div>
          <div>Qua</div>
          <div>Qui</div>
          <div>Sex</div>
          <div>Sáb</div>
        </div>

        <div className="grid grid-cols-7 gap-1">
          {Array.from({ length: startOfMonth(currentDate).getDay() }).map((_, i) => (
            <div key={`empty-start-${i}`} className="h-14 rounded-md"></div>
          ))}

          {diasDoMes.map((day) => {
            const execucoesNoDia = execucoesTreino.filter((execucao) => isSameDay(new Date(execucao.data_inicio), day))
            const isSelected = selectedDate && isSameDay(day, selectedDate)

            return (
              <motion.div
                key={day.toISOString()}
                whileHover={{ scale: 0.95 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => setSelectedDate(day)}
                className={`
                  h-14 rounded-md border cursor-pointer flex items-center justify-center relative
                  ${isSelected ? "border-blue-500 bg-blue-50" : "hover:bg-gray-50"}
                  ${isToday(day) ? "border-blue-300" : ""}
                  ${!isSameMonth(day, currentDate) ? "text-gray-300" : ""}
                `}
              >
                {renderDayContent(day)}
                {execucoesNoDia.length > 0 && (
                  <div className="absolute top-1 right-1">
                    <Badge variant="outline" className="h-4 min-w-4 p-0 flex items-center justify-center text-[10px]">
                      {execucoesNoDia.length}
                    </Badge>
                  </div>
                )}
              </motion.div>
            )
          })}

          {Array.from({ length: 6 - endOfMonth(currentDate).getDay() }).map((_, i) => (
            <div key={`empty-end-${i}`} className="h-14 rounded-md"></div>
          ))}
        </div>
      </div>
    )
  }

  const renderDetalhesDia = () => {
    if (!selectedDate) return null

    return (
      <Card className="mt-6">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <CalendarIcon className="h-5 w-5" />
              {format(selectedDate, "dd 'de' MMMM 'de' yyyy", { locale: ptBR })}
            </CardTitle>
            <Button 
              onClick={() => abrirSeletorTreinos(selectedDate)}
              size="sm"
              className="flex items-center gap-2"
            >
              <PlusIcon className="h-4 w-4" />
              Executar Treino
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {execucoesDoDiaSelecionado.length === 0 ? (
            <p className="text-gray-500 text-center py-4">
              Nenhum treino realizado neste dia.
            </p>
          ) : (
            <div className="space-y-3">
              {execucoesDoDiaSelecionado.map((execucao) => (
                <Link
                  key={execucao.id}
                  href={`/treinos/execucao/${execucao.id}`}
                  className="block border rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-semibold text-lg">
                        {execucao.treino_fixo?.nome || 'Treino Sem Nome'}
                      </h3>
                      <div className="flex flex-wrap gap-2 mt-2">
                        <div className="flex items-center gap-1 text-gray-600 text-sm">
                          <ClockIcon className="h-3.5 w-3.5" />
                          <span>
                            {execucao.duracao_minutos 
                              ? `${execucao.duracao_minutos} min` 
                              : calcularDuracao(execucao.data_inicio, execucao.data_fim)
                            }
                          </span>
                        </div>
                        <div className="flex items-center gap-1 text-gray-600 text-sm">
                          <DumbbellIcon className="h-3.5 w-3.5" />
                          <span>{execucao.exercicios_executados?.length || 0} exercícios</span>
                        </div>
                      </div>
                    </div>
                    <Badge variant={execucao.data_fim ? "default" : "secondary"}>
                      {execucao.data_fim ? "Completo" : "Em andamento"}
                    </Badge>
                  </div>
                </Link>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    )
  }

  const renderListaTreinos = () => {
    if (isLoading) {
      return (
        <div className="space-y-4">
          {Array.from({ length: 3 }).map((_, index) => (
            <Skeleton key={index} className="h-20 w-full" />
          ))}
        </div>
      )
    }

    if (execucoesFiltradas.length === 0) {
      return (
        <div className="text-center py-8">
          <DumbbellIcon className="h-12 w-12 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Nenhum treino encontrado
          </h3>
          <p className="text-gray-500">
            {filter === "todos" 
              ? "Você ainda não executou nenhum treino." 
              : `Nenhum treino "${filter}" foi encontrado.`
            }
          </p>
        </div>
      )
    }

    const execucoesAgrupadas = execucoesFiltradas.reduce((acc, execucao) => {
      const dataStr = format(new Date(execucao.data_inicio), "yyyy-MM-dd")
      if (!acc[dataStr]) acc[dataStr] = []
      acc[dataStr].push(execucao)
      return acc
    }, {} as Record<string, TreinoExecucao[]>)

    return (
      <div className="space-y-6">
        {Object.entries(execucoesAgrupadas).map(([dataStr, execucoes]) => {
          const data = new Date(dataStr)
          const dataFormatada = format(data, "dd 'de' MMMM", { locale: ptBR })
          const ehHoje = isToday(data)

          return (
            <div key={dataStr}>
              <div className="flex items-center gap-2 mb-2">
                <div
                  className={`px-2 py-1 rounded-md text-sm font-medium ${ehHoje ? "bg-blue-100 text-blue-800" : "bg-gray-100"}`}
                >
                  {dataFormatada}
                </div>
                {ehHoje && <Badge variant="default">Hoje</Badge>}
              </div>

              <div className="space-y-3">
                {execucoes.map((execucao, index) => (
                  <motion.div
                    key={execucao.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, delay: index * 0.05 }}
                  >
                    <Link
                      href={`/treinos/execucao/${execucao.id}`}
                      className="block border rounded-lg p-4 hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-semibold text-lg">
                            {execucao.treino_fixo?.nome || 'Treino Sem Nome'}
                          </h3>
                          <div className="flex flex-wrap gap-2 mt-2">
                            <div className="flex items-center gap-1 text-gray-600 text-sm">
                              <ClockIcon className="h-3.5 w-3.5" />
                              <span>
                                {execucao.duracao_minutos 
                                  ? `${execucao.duracao_minutos} min` 
                                  : calcularDuracao(execucao.data_inicio, execucao.data_fim)
                                }
                              </span>
                            </div>
                            <div className="flex items-center gap-1 text-gray-600 text-sm">
                              <DumbbellIcon className="h-3.5 w-3.5" />
                              <span>{execucao.exercicios_executados?.length || 0} exercícios</span>
                            </div>
                          </div>
                        </div>
                        <Badge variant={execucao.data_fim ? "default" : "secondary"}>
                          {execucao.data_fim ? "Completo" : "Em andamento"}
                        </Badge>
                      </div>
                    </Link>
                  </motion.div>
                ))}
              </div>
            </div>
          )
        })}
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="container mx-auto p-4">
        <Card>
          <CardContent className="p-8">
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              <span className="ml-2">Carregando calendário...</span>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Calendário de Treinos</CardTitle>
          <div className="flex gap-2">
            <Link href="/treinos/novo">
              <Button size="sm" className="flex items-center gap-1">
                <PlusIcon className="h-4 w-4" />
                <span>Novo Treino</span>
              </Button>
            </Link>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="calendar" onValueChange={(value) => setView(value as "calendar" | "list")}>
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-4">
              <TabsList className="grid w-full sm:w-auto grid-cols-2">
                <TabsTrigger value="calendar" className="flex items-center gap-1">
                  <CalendarIcon className="h-4 w-4" />
                  Calendário
                </TabsTrigger>
                <TabsTrigger value="list" className="flex items-center gap-1">
                  <DumbbellIcon className="h-4 w-4" />
                  Lista
                </TabsTrigger>
              </TabsList>

              {view === "list" && (
                <div className="flex items-center gap-2 w-full sm:w-auto">
                  <FilterIcon className="h-4 w-4 text-gray-500" />
                  <Select value={filter} onValueChange={setFilter}>
                    <SelectTrigger className="w-full sm:w-[180px]">
                      <SelectValue placeholder="Filtrar por tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="todos">Todos os treinos</SelectItem>
                      {nomesTreinosUnicos.map((nome) => (
                        <SelectItem key={nome} value={nome}>
                          {nome}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
            </div>

            <TabsContent value="calendar" className="mt-0">
              {renderCalendario()}
              {renderDetalhesDia()}
            </TabsContent>

            <TabsContent value="list" className="mt-0">
              {renderListaTreinos()}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Dialog open={showTreinoSelector} onOpenChange={setShowTreinoSelector}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Selecionar Treino para Executar</DialogTitle>
          </DialogHeader>
          {isLoadingTreinos ? (
            <p>Carregando treinos...</p>
          ) : treinosDisponiveis.length > 0 ? (
            <ul className="space-y-2 max-h-60 overflow-y-auto">
              {treinosDisponiveis.map((treino) => (
                <li key={treino.id}>
                  <Button
                    variant="ghost"
                    className="w-full justify-start"
                    onClick={() => handleSelecionarTreinoParaIniciar(treino)}
                  >
                    {treino.nome}
                  </Button>
                </li>
              ))}
            </ul>
          ) : (
            <p>Nenhum treino disponível. <Link href="/treinos/novo" className="text-blue-500 hover:underline">Crie um novo treino</Link>.</p>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
